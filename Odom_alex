#include <ros/ros.h>
#include <std_msgs/Int32.h>
#include <motor_msgs/MotorData.h>

ros::Publisher motor_pub;
std_msgs::Int32 left_data;
std_msgs::Int32 right_data;

void leftEncoderCallback(const std_msgs::Int32::ConstPtr& msg) {
    left_data = *msg;
    publishMotorData();
}

void rightEncoderCallback(const std_msgs::Int32::ConstPtr& msg) {
    right_data = *msg;
    publishMotorData();
}

void publishMotorData() {
    motor_msgs::MotorData motor_data;
    motor_data.data1 = left_data.data;
    motor_data.data2 = right_data.data;
    motor_pub.publish(motor_data);
}

int main(int argc, char **argv) {
    ros::init(argc, argv, "motor_combiner");
    ros::NodeHandle nh;

    ros::Subscriber left_encoder_sub = nh.subscribe("/motor_left/encoders", 10, leftEncoderCallback);
    ros::Subscriber right_encoder_sub = nh.subscribe("/motor_right/encoders", 10, rightEncoderCallback);
    motor_pub = nh.advertise<motor_msgs::MotorData>("/motor", 10);

    ros::spin();

    return 0;
}
